travis_fold:start:worker_info[0K[33;1mWorker information[0m
hostname: 9bb5a867-bb9d-472a-a1ee-5a81a6ba78dc@1.worker-com-oss-bb6d69d68-4p2bb.gce-production-3
version: v6.2.21 https://github.com/travis-ci/worker/tree/cd59585215f5a19c00baad33031b8ed10144ad72
instance: travis-job-b9170f43-d075-4a84-b32c-f47ab4e5f5f1 travis-ci-ubuntu-1804-1609168422-6c7eba12 (via amqp)
startup: 5.963917602s
travis_fold:end:worker_info[0Ktravis_time:start:079a41d0[0Ktravis_time:end:079a41d0:start=1611766507087717851,finish=1611766507305550991,duration=217833140,event=no_world_writable_dirs[0Ktravis_time:start:0de050b0[0Ktravis_time:end:0de050b0:start=1611766507309180140,finish=1611766507313208853,duration=4028713,event=setup_filter[0Ktravis_time:start:06ab836d[0Ktravis_time:end:06ab836d:start=1611766507317808613,finish=1611766507329781517,duration=11972904,event=agent[0Ktravis_time:start:04926810[0Ktravis_time:end:04926810:start=1611766507335366206,finish=1611766507337889371,duration=2523165,event=check_unsupported[0Ktravis_time:start:36591ef3[0Ktravis_fold:start:system_info[0K[33;1mBuild system information[0m
Build language: python
Build group: stable
Build dist: bionic
Build id: 214908026
Job id: 477353158
Runtime kernel version: 5.4.0-1032-gcp
travis-build version: 091d532a
[34m[1mBuild image provisioning date and time[0m
Mon Dec 28 15:53:02 UTC 2020
[34m[1mOperating System Details[0m
Distributor ID:	Ubuntu
Description:	Ubuntu 18.04.5 LTS
Release:	18.04
Codename:	bionic
[34m[1mSystemd Version[0m
systemd 237
[34m[1mCookbooks Version[0m
10a7b34 https://github.com/travis-ci/travis-cookbooks/tree/10a7b34
[34m[1mgit version[0m
git version 2.29.2
[34m[1mbash version[0m
GNU bash, version 4.4.20(1)-release (x86_64-pc-linux-gnu)
[34m[1mgcc version[0m
gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
[34m[1mdocker version[0m
Client:
 Version:           18.06.0-ce
 API version:       1.38
 Go version:        go1.10.3
 Git commit:        0ffa825
 Built:             Wed Jul 18 19:09:54 2018
 OS/Arch:           linux/amd64
 Experimental:      false

Server:
 Engine:
  Version:          18.06.0-ce
  API version:      1.38 (minimum version 1.12)
  Go version:       go1.10.3
  Git commit:       0ffa825
  Built:            Wed Jul 18 19:07:56 2018
  OS/Arch:          linux/amd64
  Experimental:     false
[34m[1mclang version[0m
clang version 7.0.0 (tags/RELEASE_700/final)
[34m[1mjq version[0m
jq-1.5
[34m[1mbats version[0m
Bats 0.4.0
[34m[1mshellcheck version[0m
0.7.0
[34m[1mshfmt version[0m
v3.2.1
[34m[1mccache version[0m
3.4.1
[34m[1mcmake version[0m
cmake version 3.12.4
[34m[1mheroku version[0m
heroku/7.47.6 linux-x64 node-v12.16.2
[34m[1mimagemagick version[0m
Version: ImageMagick 6.9.7-4 Q16 x86_64 20170114 http://www.imagemagick.org
[34m[1mmd5deep version[0m
4.4
[34m[1mmercurial version[0m
version 4.8
[34m[1mmysql version[0m
mysql  Ver 14.14 Distrib 5.7.32, for Linux (x86_64) using  EditLine wrapper
[34m[1mopenssl version[0m
OpenSSL 1.1.1  11 Sep 2018
[34m[1mpacker version[0m
1.3.3
[34m[1mpostgresql client version[0m
psql (PostgreSQL) 11.10 (Ubuntu 11.10-1.pgdg18.04+1)
[34m[1mragel version[0m
Ragel State Machine Compiler version 6.10 March 2017
[34m[1msudo version[0m
1.8.21p2
[34m[1mgzip version[0m
gzip 1.6
[34m[1mzip version[0m
Zip 3.0
[34m[1mvim version[0m
VIM - Vi IMproved 8.0 (2016 Sep 12, compiled Oct 13 2020 15:49:09)
[34m[1miptables version[0m
iptables v1.6.1
[34m[1mcurl version[0m
curl 7.58.0 (x86_64-pc-linux-gnu) libcurl/7.58.0 OpenSSL/1.1.1 zlib/1.2.11 libidn2/2.0.4 libpsl/0.19.1 (+libidn2/2.0.4) nghttp2/1.30.0 librtmp/2.3
[34m[1mwget version[0m
GNU Wget 1.19.4 built on linux-gnu.
[34m[1mrsync version[0m
rsync  version 3.1.2  protocol version 31
[34m[1mgimme version[0m
v1.5.4
[34m[1mnvm version[0m
0.37.2
[34m[1mperlbrew version[0m
/home/travis/perl5/perlbrew/bin/perlbrew  - App::perlbrew/0.88
[34m[1mphpenv version[0m
rbenv 1.1.2-40-g62d7798
[34m[1mrvm version[0m
rvm 1.29.10 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]
[34m[1mdefault ruby version[0m
ruby 2.6.5p114 (2019-10-01 revision 67812) [x86_64-linux]
[34m[1mElasticSearch version[0m
5.5.0
[34m[1mInstalled Firefox version[0m
firefox 63.0.1
[34m[1mMongoDB version[0m
MongoDB 4.0.22
[34m[1mPhantomJS version[0m
2.1.1
[34m[1mPre-installed PostgreSQL versions[0m
9.3.25
9.4.26
9.5.24
9.6.20
[34m[1mRedis version[0m
redis-server 6.0.6
[34m[1mPre-installed Go versions[0m
1.11.1
[34m[1mant version[0m
Apache Ant(TM) version 1.10.5 compiled on March 28 2019
[34m[1mmvn version[0m
Apache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6ba2883f)
[34m[1mgradle version[0m
Gradle 5.1.1!
[34m[1mlein version[0m
Leiningen 2.9.5 on Java 11.0.2 OpenJDK 64-Bit Server VM
[34m[1mPre-installed Node.js versions[0m
v10.16.0
v10.23.0
v11.15.0
v12.13.1
v12.20.0
v13.3.0
v14.15.3
v4.9.1
v6.17.1
v8.16.2
v8.17.0
v8.9
[34m[1mphpenv versions[0m
  system
  7.1
  7.1.33
  7.2
* 7.2.27 (set by /home/travis/.phpenv/version)
  7.3
  7.3.14
  7.4
  7.4.2
  hhvm
  hhvm-stable
[34m[1mcomposer --version[0m
Composer version 1.9.2 2020-01-14 16:30:31
[34m[1mPre-installed Ruby versions[0m
ruby-2.4.9
ruby-2.5.3
ruby-2.5.7
ruby-2.6.5
ruby-2.7.0
travis_fold:end:system_info[0K
travis_time:end:36591ef3:start=1611766507341416322,finish=1611766507363062920,duration=21646598,event=show_system_info[0Ktravis_time:start:00ca1466[0Ktravis_time:end:00ca1466:start=1611766507366450272,finish=1611766507382502329,duration=16052057,event=rm_riak_source[0Ktravis_time:start:04ecfe9c[0Ktravis_time:end:04ecfe9c:start=1611766507386209445,finish=1611766507392320594,duration=6111149,event=fix_rwky_redis[0Ktravis_time:start:11111d5a[0Ktravis_time:end:11111d5a:start=1611766507396001320,finish=1611766507801201155,duration=405199835,event=wait_for_network[0Ktravis_time:start:0d86a04c[0Ktravis_time:end:0d86a04c:start=1611766507805180957,finish=1611766508064827538,duration=259646581,event=update_apt_keys[0Ktravis_time:start:0e397678[0Ktravis_time:end:0e397678:start=1611766508069082833,finish=1611766508126765620,duration=57682787,event=fix_hhvm_source[0Ktravis_time:start:11342070[0Ktravis_time:end:11342070:start=1611766508131685863,finish=1611766508134976945,duration=3291082,event=update_mongo_arch[0Ktravis_time:start:14f65bd8[0Ktravis_time:end:14f65bd8:start=1611766508138890557,finish=1611766508182368792,duration=43478235,event=fix_sudo_enabled_trusty[0Ktravis_time:start:1f4ece78[0Ktravis_time:end:1f4ece78:start=1611766508187325164,finish=1611766508189614291,duration=2289127,event=update_glibc[0Ktravis_time:start:087ef17d[0Ktravis_time:end:087ef17d:start=1611766508193464731,finish=1611766508201875041,duration=8410310,event=clean_up_path[0Ktravis_time:start:0e347f2a[0Ktravis_time:end:0e347f2a:start=1611766508205873485,finish=1611766508215099454,duration=9225969,event=fix_resolv_conf[0Ktravis_time:start:0bee2f97[0Ktravis_time:end:0bee2f97:start=1611766508219719007,finish=1611766508247455693,duration=27736686,event=fix_etc_hosts[0Ktravis_time:start:10d77866[0Ktravis_time:end:10d77866:start=1611766508253104195,finish=1611766508261834768,duration=8730573,event=fix_mvn_settings_xml[0Ktravis_time:start:0a97c580[0Ktravis_time:end:0a97c580:start=1611766508267280184,finish=1611766508277473161,duration=10192977,event=no_ipv6_localhost[0Ktravis_time:start:0036766e[0Ktravis_time:end:0036766e:start=1611766508282414002,finish=1611766508284851713,duration=2437711,event=fix_etc_mavenrc[0Ktravis_time:start:01bef1cf[0Ktravis_time:end:01bef1cf:start=1611766508288692456,finish=1611766508292311623,duration=3619167,event=fix_wwdr_certificate[0Ktravis_time:start:11442404[0Ktravis_time:end:11442404:start=1611766508296201610,finish=1611766508356343290,duration=60141680,event=put_localhost_first[0Ktravis_time:start:0493c478[0Ktravis_time:end:0493c478:start=1611766508360653715,finish=1611766508364460263,duration=3806548,event=home_paths[0Ktravis_time:start:0573974c[0Ktravis_time:end:0573974c:start=1611766508368679550,finish=1611766508381679662,duration=13000112,event=disable_initramfs[0Ktravis_time:start:001195cd[0Ktravis_time:end:001195cd:start=1611766508386272806,finish=1611766508533181720,duration=146908914,event=disable_ssh_roaming[0Ktravis_time:start:10784f19[0Ktravis_time:end:10784f19:start=1611766508537423208,finish=1611766508540318396,duration=2895188,event=debug_tools[0Ktravis_time:start:338f0a88[0Ktravis_time:end:338f0a88:start=1611766508545457412,finish=1611766508548604272,duration=3146860,event=uninstall_oclint[0Ktravis_time:start:230bd48a[0Ktravis_time:end:230bd48a:start=1611766508552187773,finish=1611766508555676537,duration=3488764,event=rvm_use[0Ktravis_time:start:0b92bd09[0Ktravis_time:end:0b92bd09:start=1611766508560234050,finish=1611766508568789962,duration=8555912,event=rm_etc_boto_cfg[0Ktravis_time:start:0ea2bcd4[0Ktravis_time:end:0ea2bcd4:start=1611766508573045825,finish=1611766508575490598,duration=2444773,event=rm_oraclejdk8_symlink[0Ktravis_time:start:11de894d[0Ktravis_time:end:11de894d:start=1611766508579548816,finish=1611766508674659825,duration=95111009,event=enable_i386[0Ktravis_time:start:02d8a4e3[0Ktravis_time:end:02d8a4e3:start=1611766508678775962,finish=1611766508683227925,duration=4451963,event=update_rubygems[0Ktravis_time:start:27921c48[0Ktravis_time:end:27921c48:start=1611766508687656056,finish=1611766509713152200,duration=1025496144,event=ensure_path_components[0Ktravis_time:start:013bcb20[0Ktravis_time:end:013bcb20:start=1611766509717269738,finish=1611766509719991867,duration=2722129,event=redefine_curl[0Ktravis_time:start:0ba6c9c0[0Ktravis_time:end:0ba6c9c0:start=1611766509724259965,finish=1611766509823160033,duration=98900068,event=nonblock_pipe[0Ktravis_time:start:12253011[0Ktravis_time:end:12253011:start=1611766509828307672,finish=1611766515865553081,duration=6037245409,event=apt_get_update[0Ktravis_time:start:100bfae0[0Ktravis_time:end:100bfae0:start=1611766515870089005,finish=1611766515872319055,duration=2230050,event=deprecate_xcode_64[0Ktravis_time:start:1f7b03d0[0Ktravis_time:end:1f7b03d0:start=1611766515876308073,finish=1611766518733903478,duration=2857595405,event=update_heroku[0Ktravis_time:start:0a781915[0Ktravis_time:end:0a781915:start=1611766518739632970,finish=1611766518741935977,duration=2303007,event=shell_session_update[0Ktravis_time:start:196ff635[0Ktravis_fold:start:docker_mtu_and_registry_mirrors[0Ktravis_fold:end:docker_mtu_and_registry_mirrors[0Ktravis_time:end:196ff635:start=1611766518746024626,finish=1611766521160374056,duration=2414349430,event=set_docker_mtu_and_registry_mirrors[0Ktravis_time:start:01df3277[0Ktravis_fold:start:resolvconf[0Ktravis_fold:end:resolvconf[0Ktravis_time:end:01df3277:start=1611766521165385547,finish=1611766521235979773,duration=70594226,event=resolvconf[0Ktravis_time:start:17470a19[0Ktravis_time:end:17470a19:start=1611766521240207964,finish=1611766521414313497,duration=174105533,event=maven_central_mirror[0Ktravis_time:start:03bb451a[0Ktravis_time:end:03bb451a:start=1611766521419726722,finish=1611766521527954769,duration=108228047,event=maven_https[0Ktravis_time:start:1ca824cb[0Ktravis_fold:start:services[0Ktravis_time:start:03eed35c[0K$ sudo systemctl start docker
travis_time:end:03eed35c:start=1611766521541466304,finish=1611766521556675534,duration=15209230,event=prepare[0Ktravis_fold:end:services[0Ktravis_time:end:03eed35c:start=1611766521541466304,finish=1611766524565687875,duration=3024221571,event=services[0Ktravis_time:start:02257f12[0Ktravis_time:end:02257f12:start=1611766524571015276,finish=1611766524574254439,duration=3239163,event=fix_ps4[0Ktravis_time:start:008b12f8[0K
travis_fold:start:git.checkout[0Ktravis_time:start:0026772b[0K$ git clone --depth=50 --branch=develop https://github.com/precice/systemtests.git precice/systemtests
Cloning into 'precice/systemtests'...
Updating files:  83% (3963/4769)Updating files:  84% (4006/4769)Updating files:  85% (4054/4769)Updating files:  86% (4102/4769)Updating files:  87% (4150/4769)Updating files:  88% (4197/4769)Updating files:  89% (4245/4769)Updating files:  90% (4293/4769)Updating files:  91% (4340/4769)Updating files:  92% (4388/4769)Updating files:  93% (4436/4769)Updating files:  94% (4483/4769)Updating files:  95% (4531/4769)Updating files:  96% (4579/4769)Updating files:  97% (4626/4769)Updating files:  98% (4674/4769)Updating files:  99% (4722/4769)Updating files: 100% (4769/4769)Updating files: 100% (4769/4769), done.
travis_time:end:0026772b:start=1611766524583504021,finish=1611766536097296706,duration=11513792685,event=checkout[0K$ cd precice/systemtests
$ git checkout -qf dae082c35c897a15f206f775c8ebe1399f51b525
travis_fold:end:git.checkout[0K
travis_time:end:0026772b:start=1611766524583504021,finish=1611766536242971459,duration=11659467438,event=checkout[0Ktravis_time:start:0b1542c4[0K
[33;1mSetting environment variables from repository settings[0m
$ export DOCKER_PASSWORD=[secure]
$ export PRECICE_BOT_EMAIL=[secure]
$ export GH_TOKEN=[secure]
$ export DOCKER_USERNAME=precice
$ export TRAVIS_ACCESS_TOKEN=[secure]

travis_time:end:0b1542c4:start=1611766536249285383,finish=1611766536258554294,duration=9268911,event=env[0Ktravis_time:start:0867a1f1[0K$ source ~/virtualenv/python3.8/bin/activate
travis_time:end:0867a1f1:start=1611766536263589137,finish=1611766536271428571,duration=7839434,event=[0K$ python --version
Python 3.8.1
$ pip --version
pip 20.3.3 from /home/travis/virtualenv/python3.8.1/lib/python3.8/site-packages/pip (python 3.8)
travis_fold:start:install[0Ktravis_time:start:111af05e[0K$ pip install Jinja2
Collecting Jinja2
  Downloading Jinja2-2.11.2-py2.py3-none-any.whl (125 kB)
Collecting MarkupSafe>=0.23
  Downloading MarkupSafe-1.1.1-cp38-cp38-manylinux1_x86_64.whl (32 kB)
Installing collected packages: MarkupSafe, Jinja2
Successfully installed Jinja2-2.11.2 MarkupSafe-1.1.1
travis_time:end:111af05e:start=1611766536737391131,finish=1611766537935066861,duration=1197675730,event=install[0Ktravis_fold:end:install[0Ktravis_time:start:0ac004a8[0K$ export CALCULIX_TAG=develop.pr49; 
travis_time:end:0ac004a8:start=1611766537942002309,finish=1611766537944746991,duration=2744682,event=script[0K[32;1mThe command "export CALCULIX_TAG=develop.pr49; " exited with 0.[0m
travis_time:start:06664568[0K$ python system_testing.py -s su2-ccx --base Ubuntu1804.package -v
Total reclaimed space: 0B
networks:
  precicecomm: {}
services:
  calculix-adapter:
    command: '/bin/bash -c "ln -sf /home/precice/Data/Input Solid; ln -sf /home/precice/calculix-adapter/configs/*
      . && . runSolid && mkdir /home/precice/Data/Output/Solid && cp -r precice-output
      *.log /home/precice/Data/Output/Solid"

      '
    container_name: calculix-adapter
    depends_on:
    - tutorial-data
    image: precice/calculix-adapter-ubuntu1804.package-develop:develop.pr49
    networks:
      precicecomm: null
    volumes:
    - exchange:/home/precice/Data/Exchange:rw
    - output:/home/precice/Data/Output:rw
    - input_solid:/home/precice/Data/Input:rw
    - configs:/home/precice/calculix-adapter/configs:rw
  su2-adapter:
    command: "/bin/bash -c \"ln -sf /home/precice/Data/Input Fluid;\n  ln -sf /home/precice/su2-adapter/configs/*\
      \ . &&\n  . runFluid &&\n  mkdir /home/precice/Data/Output/Fluid &&\n  cp -r\
      \ precice-output *.log /home/precice/Data/Output/Fluid\"\n"
    container_name: su2-adapter
    depends_on:
    - tutorial-data
    image: precice/su2-adapter-ubuntu1804.package-develop:latest
    networks:
      precicecomm: null
    volumes:
    - exchange:/home/precice/Data/Exchange:rw
    - output:/home/precice/Data/Output:rw
    - input_fluid:/home/precice/Data/Input:rw
    - configs:/home/precice/su2-adapter/configs:rw
  tutorial-data:
    build:
      context: /home/travis/build/precice/systemtests/tests/TestCompose_su2-ccx
      dockerfile: Dockerfile.tutorial_data
    container_name: tutorial-data
    volumes:
    - input_solid:/tutorials/FSI/flap_perp/SU2-CalculiX/Solid:rw
    - input_fluid:/tutorials/FSI/flap_perp/SU2-CalculiX/Fluid:rw
    - configs:/configs:rw
    - output:/Output:rw
version: '3.0'
volumes:
  configs: {}
  exchange: {}
  input_fluid: {}
  input_solid: {}
  output: {}

Creating network "testcompose_su2-ccx_default" with the default driver
Creating network "testcompose_su2-ccx_precicecomm" with the default driver
Creating volume "testcompose_su2-ccx_exchange" with default driver
Creating volume "testcompose_su2-ccx_output" with default driver
Creating volume "testcompose_su2-ccx_configs" with default driver
Creating volume "testcompose_su2-ccx_input_solid" with default driver
Creating volume "testcompose_su2-ccx_input_fluid" with default driver
Building tutorial-data
Step 1/11 : from alpine
latest: Pulling from library/alpine
Digest: sha256:d9a7354e3845ea8466bb00b22224d9116b183e594527fb5b6c3d30bc01a20378
Status: Downloaded newer image for alpine:latest
 ---> 7731472c3f2a
Step 2/11 : ENV tutorial_path tutorials/FSI/flap_perp/SU2-CalculiX
 ---> Running in 0e08873270ee
Removing intermediate container 0e08873270ee
 ---> c4430493bed1
Step 3/11 : RUN apk add git bash
 ---> Running in bb0f89de0c34
fetch https://dl-cdn.alpinelinux.org/alpine/v3.13/main/x86_64/APKINDEX.tar.gz
fetch https://dl-cdn.alpinelinux.org/alpine/v3.13/community/x86_64/APKINDEX.tar.gz
(1/11) Installing ncurses-terminfo-base (6.2_p20210109-r0)
(2/11) Installing ncurses-libs (6.2_p20210109-r0)
(3/11) Installing readline (8.1.0-r0)
(4/11) Installing bash (5.1.0-r0)
Executing bash-5.1.0-r0.post-install
(5/11) Installing ca-certificates (20191127-r5)
(6/11) Installing brotli-libs (1.0.9-r3)
(7/11) Installing nghttp2-libs (1.42.0-r1)
(8/11) Installing libcurl (7.74.0-r0)
(9/11) Installing expat (2.2.10-r1)
(10/11) Installing pcre2 (10.36-r0)
(11/11) Installing git (2.30.0-r0)
Executing busybox-1.32.1-r0.trigger
Executing ca-certificates-20191127-r5.trigger
OK: 21 MiB in 25 packages
Removing intermediate container bb0f89de0c34
 ---> 68a7bf481cdb
Step 4/11 : ARG branch=develop
 ---> Running in 56ab2fa8fdcb
Removing intermediate container 56ab2fa8fdcb
 ---> a2ca992cedc8
Step 5/11 : RUN git clone --depth 1 --branch $branch https://github.com/precice/tutorials
 ---> Running in 4770c766ea66
[91mCloning into 'tutorials'...
[0mRemoving intermediate container 4770c766ea66
 ---> e39fd2c6fada
Step 6/11 : RUN mkdir configs &&     sed -e 's|m2n:sockets from="SU2_CFD" to="Calculix" |m2n:sockets from="SU2_CFD" to="Calculix" exchange-directory="/home/precice/Data/Exchange/" network="eth0"|g;             s|max-time-windows value="400"|max-time-windows value="50"|g; s|max-iterations value="50"|max-iterations value="20"|g;             s|\(\s\+\)\(</participant>\)|\1   <export:vtk directory="precice-output" />\n\1\2|g'             $tutorial_path/precice-config.xml  > configs/precice-config.xml
 ---> Running in 883f38505694
Removing intermediate container 883f38505694
 ---> d7903e48d25f
Step 7/11 : RUN rm $tutorial_path/precice-config.xml
 ---> Running in 598fb3a58f73
Removing intermediate container 598fb3a58f73
 ---> 9000fc7a607a
Step 8/11 : RUN cp $tutorial_path/config.yml configs/
 ---> Running in da0fa22c0186
Removing intermediate container da0fa22c0186
 ---> 11c4ba965019
Step 9/11 : RUN cp $tutorial_path/runFluid configs/ && cp $tutorial_path/runSolid configs/
 ---> Running in 37461b2bf1aa
Removing intermediate container 37461b2bf1aa
 ---> c34292a36fc5
Step 10/11 : RUN addgroup -g 1000 precice && adduser -u 1000 -G precice -D precice && chown -R precice:precice tutorials configs
 ---> Running in ba4d72e59300
Removing intermediate container ba4d72e59300
 ---> 8e52d94e5b3b
Step 11/11 : USER precice
 ---> Running in dae580a6c3eb
Removing intermediate container dae580a6c3eb
 ---> 70a16944140b
Successfully built 70a16944140b
Successfully tagged testcompose_su2-ccx_tutorial-data:latest
Image for service tutorial-data was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.
Pulling su2-adapter (precice/su2-adapter-ubuntu1804.package-develop:latest)...
latest: Pulling from precice/su2-adapter-ubuntu1804.package-develop
Pulling calculix-adapter (precice/calculix-adapter-ubuntu1804.package-develop:develop.pr49)...
develop.pr49: Pulling from precice/calculix-adapter-ubuntu1804.package-develop
Creating tutorial-data ... 
[1A[2KCreating tutorial-data ... [32mdone[0m[1BCreating su2-adapter   ... 
Creating calculix-adapter ... 
[2A[2KCreating su2-adapter      ... [32mdone[0m[2B[1A[2KCreating calculix-adapter ... [32mdone[0m[1BAttaching to tutorial-data, su2-adapter, calculix-adapter
[33msu2-adapter         |[0m Preparing and running the Fluid participant...
[33msu2-adapter         |[0m 
[33msu2-adapter         |[0m -------------------------------------------------------------------------
[33msu2-adapter         |[0m |    ___ _   _ ___                                                      |
[33msu2-adapter         |[0m |   / __| | | |_  )   Release 6.0.0  "Falcon"                           |
[33msu2-adapter         |[0m |   \__ \ |_| |/ /                                                      |
[33msu2-adapter         |[0m |   |___/\___//___|   Suite (Computational Fluid Dynamics Code)         |
[33msu2-adapter         |[0m |                                                                       |
[33msu2-adapter         |[0m -------------------------------------------------------------------------
[33msu2-adapter         |[0m | The current SU2 release has been coordinated by the                   |
[33msu2-adapter         |[0m | SU2 International Developers Society <www.su2devsociety.org>          |
[33msu2-adapter         |[0m | with selected contributions from the open-source community.           |
[33msu2-adapter         |[0m -------------------------------------------------------------------------
[33msu2-adapter         |[0m | The main research teams contributing to the current release are:      |
[33msu2-adapter         |[0m | - Prof. Juan J. Alonso's group at Stanford University.                |
[33msu2-adapter         |[0m | - Prof. Piero Colonna's group at Delft University of Technology.      |
[33msu2-adapter         |[0m | - Prof. Nicolas R. Gauger's group at Kaiserslautern U. of Technology. |
[33msu2-adapter         |[0m | - Prof. Alberto Guardone's group at Polytechnic University of Milan.  |
[33msu2-adapter         |[0m | - Prof. Rafael Palacios' group at Imperial College London.            |
[33msu2-adapter         |[0m | - Prof. Vincent Terrapon's group at the University of Liege.          |
[33msu2-adapter         |[0m | - Prof. Edwin van der Weide's group at the University of Twente.      |
[33msu2-adapter         |[0m | - Lab. of New Concepts in Aeronautics at Tech. Inst. of Aeronautics.  |
[33msu2-adapter         |[0m -------------------------------------------------------------------------
[33msu2-adapter         |[0m | Copyright 2012-2018, Francisco D. Palacios, Thomas D. Economon,       |
[33msu2-adapter         |[0m |                      Tim Albring, and the SU2 contributors.           |
[33msu2-adapter         |[0m |                                                                       |
[33msu2-adapter         |[0m | SU2 is free software; you can redistribute it and/or                  |
[33msu2-adapter         |[0m | modify it under the terms of the GNU Lesser General Public            |
[33msu2-adapter         |[0m | License as published by the Free Software Foundation; either          |
[33msu2-adapter         |[0m | version 2.1 of the License, or (at your option) any later version.    |
[33msu2-adapter         |[0m |                                                                       |
[33msu2-adapter         |[0m | SU2 is distributed in the hope that it will be useful,                |
[33msu2-adapter         |[0m | but WITHOUT ANY WARRANTY; without even the implied warranty of        |
[33msu2-adapter         |[0m | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU      |
[33msu2-adapter         |[0m | Lesser General Public License for more details.                       |
[33msu2-adapter         |[0m |                                                                       |
[33msu2-adapter         |[0m | You should have received a copy of the GNU Lesser General Public      |
[33msu2-adapter         |[0m | License along with SU2. If not, see <http://www.gnu.org/licenses/>.   |
[33msu2-adapter         |[0m -------------------------------------------------------------------------
[33msu2-adapter         |[0m 
[33msu2-adapter         |[0m ------------------------ Physical Case Definition -----------------------
[33msu2-adapter         |[0m Compressible Euler equations.
[33msu2-adapter         |[0m Mach number: 0.01.
[33msu2-adapter         |[0m Angle of attack (AoA): 0 deg, and angle of sideslip (AoS): 0 deg.
[33msu2-adapter         |[0m Performing a dynamic mesh simulation: Reading and writing ASCII SU2 native restart files.
[33msu2-adapter         |[0m Read flow solution from: Fluid/initial_flow.dat.
[33msu2-adapter         |[0m Dimensional simulation.
[33msu2-adapter         |[0m The reference area is 1 m^2.
[33msu2-adapter         |[0m The semi-span will be computed using the max y(3D) value.
[33msu2-adapter         |[0m The reference length is 1 m.
[33msu2-adapter         |[0m Reference origin for moment evaluation is (4.67118e-310, 4.67118e-310, 0).
[33msu2-adapter         |[0m Surface(s) where the force coefficients are evaluated: 
[33msu2-adapter         |[0m Input mesh file name: Fluid/fluidMesh.su2
[33msu2-adapter         |[0m 
[33msu2-adapter         |[0m ---------------------- Space Numerical Integration ----------------------
[33msu2-adapter         |[0m Jameson-Schmidt-Turkel scheme (2nd order in space) for the flow inviscid terms.
[33msu2-adapter         |[0m JST viscous coefficients (2nd & 4th): 0.5, 0.02.
[33msu2-adapter         |[0m The method includes a grid stretching correction (p = 0.3).
[33msu2-adapter         |[0m Gradient computation using Green-Gauss theorem.
[33msu2-adapter         |[0m 
[33msu2-adapter         |[0m ---------------------- Time Numerical Integration -----------------------
[33msu2-adapter         |[0m Unsteady simulation, dual time stepping strategy (first order in time).
[33msu2-adapter         |[0m Unsteady time step provided by the user (s): 0.01.
[33msu2-adapter         |[0m Total number of internal Dual Time iterations: 200.
[33msu2-adapter         |[0m Euler implicit method for the flow equations.
[33msu2-adapter         |[0m FGMRES is used for solving the linear system.
[33msu2-adapter         |[0m Using a LU-SGS preconditioning.
[33msu2-adapter         |[0m Convergence criteria of the linear solver: 0.0001.
[33msu2-adapter         |[0m Max number of linear iterations: 20.
[33msu2-adapter         |[0m V Multigrid Cycle, with 3 multigrid levels.
[33msu2-adapter         |[0m Damping factor for the residual restriction: 0.9.
[33msu2-adapter         |[0m Damping factor for the correction prolongation: 0.9.
[33msu2-adapter         |[0m No CFL adaptation.
[33msu2-adapter         |[0m Multigrid Level:                       0     1     2     3
[33msu2-adapter         |[0m Courant-Friedrichs-Lewy number:        2
[33msu2-adapter         |[0m MG PreSmooth coefficients:             1     2     3     3
[33msu2-adapter         |[0m MG PostSmooth coefficients:            0     0     0     0
[33msu2-adapter         |[0m MG CorrecSmooth coefficients:          0     0     0     0
[33msu2-adapter         |[0m 
[33msu2-adapter         |[0m ------------------------- Convergence Criteria --------------------------
[33msu2-adapter         |[0m Maximum number of iterations: 999999.
[33msu2-adapter         |[0m Reduce the density residual 1 orders of magnitude.
[33msu2-adapter         |[0m The minimum bound for the density residual is 10^(-3.5).
[33msu2-adapter         |[0m Start convergence criteria at iteration 10.
[33msu2-adapter         |[0m 
[33msu2-adapter         |[0m -------------------------- Output Information ---------------------------
[33msu2-adapter         |[0m Writing a flow solution every 1 iterations.
[33msu2-adapter         |[0m Writing the convergence history every 1 iterations.
[33msu2-adapter         |[0m Writing the dual time flow solution every 1 iterations.
[33msu2-adapter         |[0m Writing the dual time convergence history every 1 iterations.
[33msu2-adapter         |[0m The output file format is Paraview ASCII (.vtk).
[33msu2-adapter         |[0m Convergence history file name: Fluid/history.
[33msu2-adapter         |[0m Forces breakdown file name: Fluid/forces_breakdown.dat.
[33msu2-adapter         |[0m Surface flow coefficients file name: Fluid/surface_flow.
[33msu2-adapter         |[0m Flow variables file name: Fluid/flow.
[33msu2-adapter         |[0m Restart flow file name: Fluid/restart_flow.dat.
[33msu2-adapter         |[0m 
[33msu2-adapter         |[0m ------------------- Config File Boundary Information --------------------
[33msu2-adapter         |[0m Euler wall boundary marker(s): upper_wall, lower_wall, wetSurface0.
[33msu2-adapter         |[0m Symmetry plane boundary marker(s): symmetry.
[33msu2-adapter         |[0m Inlet boundary marker(s): inlet.
[33msu2-adapter         |[0m Outlet boundary marker(s): outlet.
[33msu2-adapter         |[0m 
[33msu2-adapter         |[0m ---------------------- Read Grid File Information -----------------------
[33msu2-adapter         |[0m Three dimensional problem.
[33msu2-adapter         |[0m 286 points.
[33msu2-adapter         |[0m 6 surface markers.
[33msu2-adapter         |[0m 4 boundary elements in index 0 (Marker = inlet).
[33msu2-adapter         |[0m 4 boundary elements in index 1 (Marker = outlet).
[33msu2-adapter         |[0m 12 boundary elements in index 2 (Marker = lower_wall).
[33msu2-adapter         |[0m 6 boundary elements in index 3 (Marker = upper_wall).
[33msu2-adapter         |[0m 11 boundary elements in index 4 (Marker = wetSurface0).
[33msu2-adapter         |[0m 494 boundary elements in index 5 (Marker = symmetry).
[33msu2-adapter         |[0m 247 prisms.
[33msu2-adapter         |[0m 
[33msu2-adapter         |[0m ------------------------- Geometry Preprocessing ------------------------
[33msu2-adapter         |[0m Setting point connectivity.
[33msu2-adapter         |[0m Renumbering points (Reverse Cuthill McKee Ordering).
[33msu2-adapter         |[0m Recomputing point connectivity.
[33msu2-adapter         |[0m Setting element connectivity.
[33msu2-adapter         |[0m Checking the numerical grid orientation.
[33msu2-adapter         |[0m There has been a re-orientation of the PRISM volume elements.
[33msu2-adapter         |[0m There has been a re-orientation of the TRIANGLE surface elements.
[33msu2-adapter         |[0m Identifying edges and vertices.
[33msu2-adapter         |[0m Computing centers of gravity.
[33msu2-adapter         |[0m Setting the control volume structure.
[33msu2-adapter         |[0m Volume of the computational grid: 7.17.
[33msu2-adapter         |[0m Searching for the closest normal neighbors to the surfaces.
[33msu2-adapter         |[0m Storing a mapping from global to local point index.
[33msu2-adapter         |[0m Compute the surface curvature.
[33msu2-adapter         |[0m Max K: 54.7. Mean K: 11.2. Standard deviation K: 16.6.
[33msu2-adapter         |[0m Checking for periodicity.
[33msu2-adapter         |[0m Setting the multigrid structure.
[36mtutorial-data exited with code 0
[0m[32mcalculix-adapter    |[0m Running the Solid participant...
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m ************************************************************
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m CalculiX Version 2.16, Copyright(C) 1998-2019 Guido Dhondt
[32mcalculix-adapter    |[0m CalculiX comes with ABSOLUTELY NO WARRANTY. This is free
[32mcalculix-adapter    |[0m software, and you are welcome to redistribute it under
[32mcalculix-adapter    |[0m certain conditions, see gpl.htm
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m ************************************************************
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m You are using an executable made on Mo 25. Nov 18:56:47 CET 2019
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m   The numbers below are estimated upper bounds
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m   number of:
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m    nodes:           68
[32mcalculix-adapter    |[0m    elements:            5
[32mcalculix-adapter    |[0m    one-dimensional elements:            0
[32mcalculix-adapter    |[0m    two-dimensional elements:            0
[32mcalculix-adapter    |[0m    integration points per element:           27
[32mcalculix-adapter    |[0m    degrees of freedom per node:            3
[32mcalculix-adapter    |[0m    layers per element:            1
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m    distributed facial loads:            0
[32mcalculix-adapter    |[0m    distributed volumetric loads:            0
[32mcalculix-adapter    |[0m    concentrated loads:          174
[32mcalculix-adapter    |[0m    single point constraints:           92
[32mcalculix-adapter    |[0m    multiple point constraints:            1
[32mcalculix-adapter    |[0m    terms in all multiple point constraints:            1
[32mcalculix-adapter    |[0m    tie constraints:            0
[32mcalculix-adapter    |[0m    dependent nodes tied by cyclic constraints:            0
[32mcalculix-adapter    |[0m    dependent nodes in pre-tension constraints:            0
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m    sets:            4
[32mcalculix-adapter    |[0m    terms in all sets:          207
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m    materials:            1
[32mcalculix-adapter    |[0m    constants per material and temperature:            2
[32mcalculix-adapter    |[0m    temperature points per material:            1
[32mcalculix-adapter    |[0m    plastic data points per material:            0
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m    orientations:            0
[32mcalculix-adapter    |[0m    amplitudes:            3
[32mcalculix-adapter    |[0m    data points in all amplitudes:            3
[32mcalculix-adapter    |[0m    print requests:            0
[32mcalculix-adapter    |[0m    transformations:            0
[32mcalculix-adapter    |[0m    property cards:            0
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m  *INFO reading *STEP: nonlinear geometric
[32mcalculix-adapter    |[0m        effects are turned on
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m  STEP            1
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m  Dynamic analysis was selected
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m  Newton-Raphson iterative procedure is active
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m  Nonlinear geometric effects are taken into account
[32mcalculix-adapter    |[0m 
[33msu2-adapter         |[0m Computing wall distances.
[33msu2-adapter         |[0m Semi-span length = -1e+10 m.
[33msu2-adapter         |[0m Wetted area = 0 m^2.
[33msu2-adapter         |[0m Area projection in the x-plane = 0 m^2, y-plane = 0 m^2, z-plane = 0 m^2.
[33msu2-adapter         |[0m Max. coordinate in the x-direction = -1e+10 m, y-direction = -1e+10 m, z-direction = -1e+10 m.
[33msu2-adapter         |[0m Min coordinate in the x-direction = 1e+10 m, y-direction = 1e+10 m,, z-direction = 1e+10 m.
[33msu2-adapter         |[0m 
[33msu2-adapter         |[0m ------------------------- Driver information --------------------------
[33msu2-adapter         |[0m A Fluid driver has been instantiated.
[33msu2-adapter         |[0m 
[33msu2-adapter         |[0m ------------------------ Iteration Preprocessing ------------------------
[33msu2-adapter         |[0m Zone 1: Euler/Navier-Stokes/RANS fluid iteration.
[33msu2-adapter         |[0m 
[33msu2-adapter         |[0m ------------------------- Solver Preprocessing --------------------------
[33msu2-adapter         |[0m Inviscid flow: Computing density based on free-stream
[33msu2-adapter         |[0m temperature and pressure using the ideal gas law.
[33msu2-adapter         |[0m Force coefficients computed using MACH_MOTION.
[33msu2-adapter         |[0m -- Input conditions:
[33msu2-adapter         |[0m Fluid Model: STANDARD_AIR 
[33msu2-adapter         |[0m Specific gas constant: 287.058 N.m/kg.K.
[33msu2-adapter         |[0m Specific gas constant (non-dim): 287.058
[33msu2-adapter         |[0m Specific Heat Ratio: 1.4
[33msu2-adapter         |[0m Free-stream static pressure: 101300 Pa.
[33msu2-adapter         |[0m Free-stream total pressure: 101307 Pa.
[33msu2-adapter         |[0m Free-stream temperature: 288 K.
[33msu2-adapter         |[0m Free-stream density: 1.22531 kg/m^3.
[33msu2-adapter         |[0m Free-stream velocity: (3.40208, 0, 0) m/s. Magnitude: 3.40208 m/s (6.61311 KTS).
[33msu2-adapter         |[0m Free-stream total energy per unit mass: 206688 m^2/s^2.
[33msu2-adapter         |[0m Total time: 6 s. Time step: 0.01 s.
[33msu2-adapter         |[0m -- Reference values:
[33msu2-adapter         |[0m Reference specific gas constant: 1 N.m/kg.K.
[33msu2-adapter         |[0m Reference pressure: 1 Pa.
[33msu2-adapter         |[0m Reference temperature: 1 K.
[33msu2-adapter         |[0m Reference density: 1 kg/m^3.
[33msu2-adapter         |[0m Reference velocity: 1 m/s.
[33msu2-adapter         |[0m Reference energy per unit mass: 1 m^2/s^2.
[33msu2-adapter         |[0m Reference time: 1 s.
[33msu2-adapter         |[0m -- Resulting non-dimensional state:
[33msu2-adapter         |[0m Mach number (non-dim): 0.01
[33msu2-adapter         |[0m Specific gas constant (non-dim): 287.058
[33msu2-adapter         |[0m Free-stream temperature (non-dim): 288
[33msu2-adapter         |[0m Free-stream pressure (non-dim): 101300
[33msu2-adapter         |[0m Free-stream density (non-dim): 1.22531
[33msu2-adapter         |[0m Free-stream velocity (non-dim): (3.40208, 0, 0). Magnitude: 3.40208
[33msu2-adapter         |[0m Free-stream total energy per unit mass (non-dim): 206688
[33msu2-adapter         |[0m Total time (non-dim): 6
[33msu2-adapter         |[0m Time step (non-dim): 0.01
[33msu2-adapter         |[0m 
[33msu2-adapter         |[0m Initialize Jacobian structure (Euler). MG level: 0.
[33msu2-adapter         |[0m 
[33msu2-adapter         |[0m ----------------- Integration and Numerics Preprocessing ----------------
[33msu2-adapter         |[0m Integration Preprocessing.
[33msu2-adapter         |[0m Numerics Preprocessing.
[33msu2-adapter         |[0m Setting dynamic mesh structure for zone 0.
[33msu2-adapter         |[0m 
[33msu2-adapter         |[0m ---------------------- Python Interface Preprocessing ---------------------
[33msu2-adapter         |[0m Setting customized boundary conditions for zone 0
[33msu2-adapter         |[0m --------------------------------------------------------------------------
[33msu2-adapter         |[0m [[14030,1],0]: A high-performance Open MPI point-to-point messaging module
[33msu2-adapter         |[0m was unable to find any relevant network interfaces:
[33msu2-adapter         |[0m 
[33msu2-adapter         |[0m Module: OpenFabrics (openib)
[33msu2-adapter         |[0m   Host: 7b92069797e9
[33msu2-adapter         |[0m 
[33msu2-adapter         |[0m Another transport will be used instead, although this may result in
[33msu2-adapter         |[0m lower performance.
[33msu2-adapter         |[0m 
[33msu2-adapter         |[0m NOTE: You can disable this warning by setting the MCA parameter
[33msu2-adapter         |[0m btl_base_warn_component_unused to 0.
[33msu2-adapter         |[0m --------------------------------------------------------------------------
[33msu2-adapter         |[0m ---[precice] [0m This is preCICE version 2.2.0
[33msu2-adapter         |[0m ---[precice] [0m Revision info: no-info [Git failed/Not a repository]
[33msu2-adapter         |[0m ---[precice] [0m Configuration: Debug
[33msu2-adapter         |[0m ---[precice] [0m Configuring preCICE with configuration "./precice-config.xml"
[33msu2-adapter         |[0m ---[precice] [0m I am participant "SU2"
[33msu2-adapter         |[0m ---[precice] [31mERROR: [0m This participant's name, which was specified in the constructor of the preCICE interface as "SU2", is not defined in the preCICE configuration. Please double-check the correct spelling.
[33msu2-adapter         |[0m cp: cannot stat 'precice-output': No such file or directory
[32mcalculix-adapter    |[0m  Decascading the MPC's
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m  Determining the structure of the matrix:
[32mcalculix-adapter    |[0m  number of equations
[32mcalculix-adapter    |[0m  120
[32mcalculix-adapter    |[0m  number of nonzero lower triangular matrix elements
[32mcalculix-adapter    |[0m  2916
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m Starting FSI analysis via preCICE using the geometrically non-linear CalculiX solver...
[32mcalculix-adapter    |[0m  Using up to 1 cpu(s) for the stress calculation.
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m  Using up to 1 cpu(s) for the energy calculation.
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m  Using up to 1 cpu(s) for the symmetric stiffness/mass contributions.
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m  Factoring the system of equations using the symmetric spooles solver
[32mcalculix-adapter    |[0m  Using 1 cpu for spooles.
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m  Using up to 1 cpu(s) for the stress calculation.
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m  Using up to 1 cpu(s) for the energy calculation.
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m Setting up preCICE participant Calculix, using config file: config.yml
[33msu2-adapter exited with code 1
[0m[32mcalculix-adapter    |[0m --------------------------------------------------------------------------
[32mcalculix-adapter    |[0m [[54175,1],0]: A high-performance Open MPI point-to-point messaging module
[32mcalculix-adapter    |[0m was unable to find any relevant network interfaces:
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m Module: OpenFabrics (openib)
[32mcalculix-adapter    |[0m   Host: d654947b64e3
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m Another transport will be used instead, although this may result in
[32mcalculix-adapter    |[0m lower performance.
[32mcalculix-adapter    |[0m 
[32mcalculix-adapter    |[0m NOTE: You can disable this warning by setting the MCA parameter
[32mcalculix-adapter    |[0m btl_base_warn_component_unused to 0.
[32mcalculix-adapter    |[0m --------------------------------------------------------------------------
[32mcalculix-adapter    |[0m ---[precice] [0m This is preCICE version 2.2.0
[32mcalculix-adapter    |[0m ---[precice] [0m Revision info: no-info [Git failed/Not a repository]
[32mcalculix-adapter    |[0m ---[precice] [0m Configuration: Debug
[32mcalculix-adapter    |[0m ---[precice] [0m Configuring preCICE with configuration "./precice-config.xml"
[32mcalculix-adapter    |[0m ---[precice] [0m I am participant "Calculix"
[32mcalculix-adapter    |[0m [d654947b64e3:00008] *** Process received signal ***
[32mcalculix-adapter    |[0m [d654947b64e3:00008] Signal: Segmentation fault (11)
[32mcalculix-adapter    |[0m [d654947b64e3:00008] Signal code: Address not mapped (1)
[32mcalculix-adapter    |[0m [d654947b64e3:00008] Failing at address: (nil)
[32mcalculix-adapter    |[0m [d654947b64e3:00008] [ 0] /lib/x86_64-linux-gnu/libpthread.so.0(+0x12980)[0x7f8155488980]
[32mcalculix-adapter    |[0m [d654947b64e3:00008] [ 1] ccx_preCICE(+0x1dda83)[0x5603361b2a83]
[32mcalculix-adapter    |[0m [d654947b64e3:00008] [ 2] ccx_preCICE(+0x1de53f)[0x5603361b353f]
[32mcalculix-adapter    |[0m [d654947b64e3:00008] [ 3] ccx_preCICE(+0x1c606f)[0x56033619b06f]
[32mcalculix-adapter    |[0m [d654947b64e3:00008] [ 4] ccx_preCICE(+0xca89)[0x560335fe1a89]
[32mcalculix-adapter    |[0m [d654947b64e3:00008] [ 5] /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xe7)[0x7f8154929bf7]
[32mcalculix-adapter    |[0m [d654947b64e3:00008] [ 6] ccx_preCICE(+0x14f2a)[0x560335fe9f2a]
[32mcalculix-adapter    |[0m [d654947b64e3:00008] *** End of error message ***
[32mcalculix-adapter    |[0m cp: cannot stat 'precice-output': No such file or directory
[32mcalculix-adapter exited with code 1
[0m------------- Comparing files -------------
Comparing values in 'Fluid.log'...
> Text difference in Fluid.log
							      >	---[precice] [m Configuration: Debug
---[precice] [m I am participant "SU_CFD"		      |	---[precice] [m I am participant "SU"
---[precice] [m Setting up master communication to coupling p |	---[precice] [mERROR: [m This participant's name, which was s
---[precice] [m Masters are connected			      <
---[precice] [m Setting up preliminary slaves communication t <
---[precice] [m Receive global mesh Calculix_Mesh	      <
---[precice] [m Prepare partition for mesh SU_Mesh	      <
---[precice] [m Setting up slaves communication to coupling p <
---[precice] [m Slaves are connected			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
------------------------------ Begin Solver ----------------- <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Compute write mapping from mesh "SU_Mesh" to  <
---[precice] [m Mapping distance min: max: avg:  var:  cnt:   <
---[precice] [m Compute read mapping from mesh "Calculix_Mesh <
---[precice] [m Mapping distance min: max: avg:  var:  cnt:   <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
CSysSolve::FGMRES(): system solved by initial guess.	      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 Deforming the volume grid due to preCICE simulation.	      <
Computing volumes of the grid elements.			      <
Min. volume: , max. volume: .				      <
Computing volumes of the grid elements.			      <
Non-linear iter.: /. Linear iter.: . Min. volume: . Error: .  <
 Computing grid velocities by finite differencing due to preC <
Min DT: .Max DT: .Dual Time step: .			      <
----------------------- Residual Evolution Summary ---------- <
log[Maximum residual]: .				      <
Maximum residual point , located at (, , ).		      <
 IntIter ExtIter     Res[Rho]     Res[RhoE]      CL(Total)    <
------------------------ Evaluate Special Output ------------ <
Writing the forces breakdown file (Fluid/forces_breakdown.dat <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
-------------------------- File Output Summary -------------- <
Writing comma-separated values (CSV) surface files.	      <
Loading solution output data locally on each rank.	      <
Sorting output data across all ranks.			      <
Writing ASCII SU native restart file.			      <
Preparing element connectivity across all ranks.	      <
Writing Paraview ASCII volume solution file.		      <
------------------------- Solver Postprocessing ------------- <
Deleted CNumerics container.				      <
Deleted CIntegration container.				      <
Deleted CSolver container.				      <
Deleted CIteration container.				      <
Deleted CInterpolator container.			      <
Deleted CTransfer container.				      <
Deleted CGeometry container.				      <
Deleted CFreeFormDefBox class.				      <
Deleted CSurfaceMovement class.				      <
Deleted CVolumetricMovement class.			      <
Deleted CConfig container.				      <
Deleted COutput class.					      <
Completed in onds on  core.				      <
Process #/: Finalizing preCICE...			      <
Process #/: Done finalizing preCICE!			      <
------------------------- Exit Success (SU_CFD) ------------- <
Comparing values in 'precice-Calculix-watchpoint-point1.log'...
This file has no numeric entries!
> Text difference in precice-Calculix-watchpoint-point1.log
Time  Coordinate  Coordinate  Coordinate  DisplacementDeltas  |
Comparing values in 'precice-Calculix-watchpoint-point1.log'...
This file has no numeric entries!
> Text difference in precice-Calculix-watchpoint-point1.log
Time  Coordinate  Coordinate  Coordinate  DisplacementDeltas  |
Comparing values in 'Solid.log'...
> Numerical difference in Solid.log
Average: 6.984e+09 ; Maximum: 815548897999 
> Text difference in Solid.log
							      >	---[precice] [m Configuration: Debug
Set ID Found						      |	[db:] *** Process received signal ***
Read data 'Forces' found with ID # ''.			      |	[db:] Signal: Segmentation fault ()
Write data 'DisplacementDeltas' found with ID # ''.	      |	[db:] Signal code: Address not mapped ()
---[precice] [m Setting up master communication to coupling p |	[db:] Failing at address: (nil)
---[precice] [m Masters are connected			      |	[db:] [ ] /lib/x_-linux-gnu/libpthread.so(+)[f]
---[precice] [m Setting up preliminary slaves communication t |	[db:] [ ] ccx_preCICE(+dda)[ba]
---[precice] [m Prepare partition for mesh Calculix_Mesh      |	[db:] [ ] ccx_preCICE(+def)[bf]
---[precice] [m Gather mesh Calculix_Mesh		      |	[db:] [ ] ccx_preCICE(+cf)[bf]
---[precice] [m Send global mesh Calculix_Mesh		      |	[db:] [ ] ccx_preCICE(+a)[fea]
---[precice] [m Setting up slaves communication to coupling p |	[db:] [ ] /lib/x_-linux-gnu/libc.so(__libc_start_main+)[fbf]
---[precice] [m Slaves are connected			      |	[db:] [ ] ccx_preCICE(+fa)[fefa]
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong |	[db:] *** End of error message ***
Initializing coupling data				      <
Adapter writing coupling data...			      <
---[precice] [m initializeData is skipped since no data has t <
Adapter reading coupling data...			      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence						      <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing first order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
Adapter writing checkpoint...				      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
Adapter reading checkpoint...				      <
Adjusting time step for transient step			      <
precice_dt dtheta = , dtheta = , solver_dt = 		      <
Adapter reading coupling data...			      <
Reading FORCES coupling data with ID ''.		      <
 increment  attempt 					      <
 increment size= 					      <
 sum of previous increments=				      <
 actual step time=					      <
 actual total time=					      <
 iteration 						      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp= 				      <
 no convergence						      <
 iteration 						      <
 Using up to  cpu(s) for the symmetric stiffness/mass contrib <
 Factoring the system of equations using the symmetric spoole <
 Using  cpu for spooles.				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Using up to  cpu(s) for the energy calculation.	      <
 average force= 					      <
 time avg. forc= 					      <
 largest residual force=  in node  and dof 		      <
 largest increment of disp= 				      <
 largest correction to disp=  in node  and dof 		      <
 convergence; the increment size is increased to 	      <
 the increment size exceeds the maximum allowed and is decrea <
 the increment size exceeds the remainder of the step and is  <
Adapter writing coupling data...			      <
Writing DISPLACEMENTDELTAS coupling data with ID ''.	      <
Adapter calling advance()...				      <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m relative convergence measure: relative two-no <
---[precice] [m All converged				      <
---[precice] [m Performing second order extrapolation	      <
---[precice] [m Time window completed			      <
---[precice] [m it  of  | dt#  of  | t  | dt  | max dt  | ong <
 initial energy (at start of step) = 			      <
 since start of the step:				      <
 external work = 					      <
 work performed by the damping forces = 		      <
 netto work = 						      <
 actual energy:						      <
 internal energy = 					      <
 kinetic energy = 					      <
 elastic contact energy = 				      <
 energy lost due to friction = 				      <
 total energy  = 					      <
 energy increase = 					      <
 energy balance (absolute) = 				      <
 energy balance (relative) =  %				      <
 Using up to  cpu(s) for the stress calculation.	      <
 Job finished						      <
> Only in /home/travis/build/precice/systemtests/tests/TestCompose_su2-ccx/referenceOutput/Fluid: precice-output
Only in /home/travis/build/precice/systemtests/tests/TestCompose_su2-ccx/referenceOutput/Fluid: precice-SU2_CFD-iterations.log
Only in /home/travis/build/precice/systemtests/tests/TestCompose_su2-ccx/referenceOutput/Solid: precice-Calculix-convergence.log
Only in /home/travis/build/precice/systemtests/tests/TestCompose_su2-ccx/referenceOutput/Solid: precice-Calculix-iterations.log
Only in /home/travis/build/precice/systemtests/tests/TestCompose_su2-ccx/referenceOutput/Solid: precice-output
----------- Comparison finished -----------
EXECUTING: docker container prune -f; export PRECICE_BASE=-ubuntu1804.package-develop; mkdir Logs; docker-compose config && bash ../../silent_compose.sh debug
EXECUTING: docker cp tutorial-data:/Output .
EXECUTING: docker-compose logs > Logs/container.log
EXECUTING: bash ../../compare_results.sh /home/travis/build/precice/systemtests/tests/TestCompose_su2-ccx/referenceOutput /home/travis/build/precice/systemtests/tests/TestCompose_su2-ccx/Output
TEST FAILED WITH: Output files do not match reference
Files differing               : ['Fluid.log', 'precice-Calculix-watchpoint-point1.log', 'Solid.log', 'precice-Calculix-watchpoint-point1.log']
Files only in reference (left): ['precice-SU2_CFD-iterations.log', 'precice-output', 'precice-Calculix-convergence.log', 'precice-Calculix-iterations.log', 'precice-output']
Files only in output(right)   : []
Traceback (most recent call last):
  File "system_testing.py", line 133, in run_compose
    comparison(path_to_ref, path_to_otp)
  File "system_testing.py", line 210, in comparison
    raise IncorrectOutput(*ret)
__main__.IncorrectOutput: Output files do not match reference
Files differing               : ['Fluid.log', 'precice-Calculix-watchpoint-point1.log', 'Solid.log', 'precice-Calculix-watchpoint-point1.log']
Files only in reference (left): ['precice-SU2_CFD-iterations.log', 'precice-output', 'precice-Calculix-convergence.log', 'precice-Calculix-iterations.log', 'precice-output']
Files only in output(right)   : []

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "system_testing.py", line 305, in <module>
    build_run_compare(test, tag, args.branch.lower(), args.local,
  File "system_testing.py", line 227, in build_run_compare
    run_compose(test, branch, local_precice, tag, force_rebuild, rm_all, verbose)
  File "system_testing.py", line 145, in run_compose
    raise STValidateException()
__main__.STValidateException: COMPARISON FAILED - An error occured while comparing test results with reference files!
travis_time:end:06664568:start=1611766537949372077,finish=1611766681028775595,duration=143079403518,event=script[0K[31;1mThe command "python system_testing.py -s su2-ccx --base Ubuntu1804.package -v" exited with 1.[0m
travis_time:start:1642d5a8[0K$ python push.py
Cloning into 'precice_st_output'...
Updating files:  14% (6219/42677)Updating files:  15% (6402/42677)Updating files:  16% (6829/42677)Updating files:  17% (7256/42677)Updating files:  18% (7682/42677)Updating files:  19% (8109/42677)Updating files:  20% (8536/42677)Updating files:  21% (8963/42677)Updating files:  22% (9389/42677)Updating files:  23% (9816/42677)Updating files:  24% (10243/42677)Updating files:  25% (10670/42677)Updating files:  26% (11097/42677)Updating files:  27% (11523/42677)Updating files:  28% (11950/42677)Updating files:  29% (12377/42677)Updating files:  30% (12804/42677)Updating files:  30% (13095/42677)Updating files:  31% (13230/42677)Updating files:  32% (13657/42677)Updating files:  33% (14084/42677)Updating files:  34% (14511/42677)Updating files:  35% (14937/42677)Updating files:  36% (15364/42677)Updating files:  37% (15791/42677)Updating files:  38% (16218/42677)Updating files:  39% (16645/42677)Updating files:  40% (17071/42677)Updating files:  41% (17498/42677)Updating files:  42% (17925/42677)Updating files:  43% (18352/42677)Updating files:  44% (18778/42677)Updating files:  44% (18820/42677)Updating files:  45% (19205/42677)Updating files:  46% (19632/42677)Updating files:  47% (20059/42677)Updating files:  48% (20485/42677)Updating files:  49% (20912/42677)Updating files:  50% (21339/42677)Updating files:  51% (21766/42677)Updating files:  52% (22193/42677)Updating files:  53% (22619/42677)Updating files:  54% (23046/42677)Updating files:  55% (23473/42677)Updating files:  56% (23900/42677)Updating files:  57% (24326/42677)Updating files:  58% (24753/42677)Updating files:  59% (25180/42677)Updating files:  60% (25607/42677)Updating files:  61% (26033/42677)Updating files:  62% (26460/42677)Updating files:  63% (26887/42677)Updating files:  64% (27314/42677)Updating files:  65% (27741/42677)Updating files:  66% (28167/42677)Updating files:  66% (28587/42677)Updating files:  67% (28594/42677)Updating files:  68% (29021/42677)Updating files:  68% (29282/42677)Updating files:  69% (29448/42677)Updating files:  70% (29874/42677)Updating files:  70% (29985/42677)Updating files:  71% (30301/42677)Updating files:  72% (30728/42677)Updating files:  73% (31155/42677)Updating files:  74% (31581/42677)Updating files:  75% (32008/42677)Updating files:  76% (32435/42677)Updating files:  77% (32862/42677)Updating files:  78% (33289/42677)Updating files:  79% (33715/42677)Updating files:  79% (34135/42677)Updating files:  80% (34142/42677)Updating files:  80% (34378/42677)Updating files:  81% (34569/42677)Updating files:  81% (34650/42677)Updating files:  81% (34792/42677)Updating files:  81% (34962/42677)Updating files:  82% (34996/42677)Updating files:  82% (35082/42677)Updating files:  82% (35169/42677)Updating files:  82% (35261/42677)Updating files:  82% (35342/42677)Updating files:  82% (35414/42677)Updating files:  83% (35422/42677)Updating files:  83% (35457/42677)Updating files:  83% (35537/42677)Updating files:  83% (35647/42677)Updating files:  83% (35742/42677)Updating files:  83% (35784/42677)Updating files:  83% (35846/42677)Updating files:  84% (35849/42677)Updating files:  84% (35964/42677)Updating files:  84% (36045/42677)Updating files:  84% (36124/42677)Updating files:  84% (36198/42677)Updating files:  85% (36276/42677)Updating files:  85% (36285/42677)Updating files:  85% (36330/42677)Updating files:  85% (36411/42677)Updating files:  85% (36483/42677)Updating files:  85% (36552/42677)Updating files:  85% (36606/42677)Updating files:  85% (36678/42677)Updating files:  86% (36703/42677)Updating files:  86% (36777/42677)Updating files:  86% (36852/42677)Updating files:  86% (36940/42677)Updating files:  86% (37014/42677)Updating files:  86% (37098/42677)Updating files:  87% (37129/42677)Updating files:  87% (37212/42677)Updating files:  87% (37298/42677)Updating files:  87% (37424/42677)Updating files:  87% (37474/42677)Updating files:  87% (37553/42677)Updating files:  88% (37556/42677)Updating files:  88% (37650/42677)Updating files:  88% (37731/42677)Updating files:  88% (37758/42677)Updating files:  88% (37950/42677)Updating files:  89% (37983/42677)Updating files:  89% (38025/42677)Updating files:  89% (38162/42677)Updating files:  90% (38410/42677)Updating files:  91% (38837/42677)Updating files:  91% (39262/42677)Updating files:  92% (39263/42677)Updating files:  92% (39354/42677)Updating files:  92% (39518/42677)Updating files:  92% (39617/42677)Updating files:  93% (39690/42677)Updating files:  93% (39717/42677)Updating files:  93% (39804/42677)Updating files:  93% (39890/42677)Updating files:  93% (39974/42677)Updating files:  93% (40050/42677)Updating files:  94% (40117/42677)Updating files:  94% (40137/42677)Updating files:  94% (40239/42677)Updating files:  94% (40334/42677)Updating files:  94% (40409/42677)Updating files:  94% (40496/42677)Updating files:  95% (40544/42677)Updating files:  95% (40584/42677)Updating files:  95% (40671/42677)Updating files:  95% (40757/42677)Updating files:  95% (40851/42677)Updating files:  95% (40949/42677)Updating files:  96% (40970/42677)Updating files:  96% (41085/42677)Updating files:  96% (41087/42677)Updating files:  96% (41184/42677)Updating files:  96% (41295/42677)Updating files:  97% (41397/42677)Updating files:  97% (41438/42677)Updating files:  97% (41532/42677)Updating files:  97% (41626/42677)Updating files:  97% (41703/42677)Updating files:  97% (41756/42677)Updating files:  98% (41824/42677)Updating files:  98% (41834/42677)Updating files:  98% (41911/42677)Updating files:  98% (42002/42677)Updating files:  98% (42086/42677)Updating files:  98% (42183/42677)Updating files:  99% (42251/42677)Updating files:  99% (42267/42677)Updating files:  99% (42348/42677)Updating files:  99% (42435/42677)Updating files:  99% (42513/42677)Updating files:  99% (42560/42677)Updating files: 100% (42677/42677)Updating files: 100% (42677/42677), done.
